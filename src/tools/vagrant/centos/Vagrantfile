# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # config.vm.network "forwarded_port", guest: 15432, host: 5432, protocol: "tcp"
  # config.vm.network "forwarded_port", guest: 16432, host: 6432, protocol: "tcp"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "1.1.1.1"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2 d
  # SHELL

  # gbdb https://github.com/greenplum-db/gpdb/tree/master/src/tools/vagrant
  # Base box: Centos-7 box
  config.vm.hostname="gpdbvagrant"

  # Give a reasonable amount of cpu and memory to the VM
  config.vm.provider "virtualbox" do |vb|
    vb.name = "gpdb-dev-host" # Name in VirtualBox
    vb.memory = 4096
    vb.cpus = 2
    vb.customize ["storagectl", :id, "--name", "IDE", "--hostiocache", "on"]
    vb.customize ['modifyvm', :id, '--cableconnected1', 'on']
  end

  if File.file?('vagrant-local.yml')
    local_config = YAML::load_file('vagrant-local.yml')
    local_config['synced_folder'].each do |folder|
      config.vm.synced_folder folder['local'], folder['shared'] unless folder['local'].nil? or folder['shared'].nil?
    end
  end

  config.vm.define("gpdb") do |gpdb|
    gpdb.vm.provision "shell", path: "vagrant-setup.sh"
    gpdb.vm.provision "shell", path: "vagrant-configure-os.sh"
    gpdb.vm.provision "shell", path: "vagrant-build-gporca.sh", privileged: false
    gpdb.vm.provision "shell", path: "vagrant-build-gpdb.sh", privileged: false, args: "--enable-orca"
  end

  config.vm.define("gpdb_without_gporca") do |gpdb_without_gporca|
    gpdb_without_gporca.vm.provision "shell", path: "vagrant-setup.sh"
    gpdb_without_gporca.vm.provision "shell", path: "vagrant-configure-os.sh"
    gpdb_without_gporca.vm.provision "shell", path: "vagrant-build-gpdb.sh", privileged: false
  end
end
